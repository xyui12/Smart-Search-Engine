# -*- coding: utf-8 -*-
""": Analytics Vidhya_Assigment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ASeGf4V9pjgq8cM4_geaChY8ZQSHpXMy
"""

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import pandas as pd
from sentence_transformers import SentenceTransformer

data = pd.read_excel('/content/Analytics.xlsx')
data.head()

#Combine relevant columns into a single string for embeddings
data['combined'] = data['course_title'] + data['Description']
#Load the model for sentence embeddings
model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
#create embeddings for the course descriptions
embeddings = model.encode(data['combined'].tolist(), convert_to_numpy=True)
data['embeddings'] = list(embeddings)

#Preprocessing function to handle common abbreviations and synonyms
def preprocess_query(query):
  query = query.lower()
  synonyms = {"ml": "machine learning","ai": "artificial intelligence","dl": "deep learning"}
  for short_form, full_form in synonyms.items():
    query = query.replace(short_form, full_form)
  return query



def search_courses(query, data, model, top_k=5, threshold=0.3):
    query = preprocess_query(query)
    query_embedding = model.encode(query, convert_to_numpy=True)

    #computing the cosine similarity between the query and all course embeddings
    similarities = cosine_similarity([query_embedding], np.stack(data['embeddings']))
    filtered_indices = np.where(similarities[0] >= threshold)[0]
    if len(filtered_indices) == 0:
      return pd.DataFrame({"course_title": ["No relevant courses found for your query."], "Description": [""]})

    #sort results by similarity and select the top_k courses
    top_k_indices = similarities[0][filtered_indices].argsort()[-top_k:][::-1]
    return data.iloc[filtered_indices[top_k_indices]][['course_title', 'Description']]
    results = search_courses('machine learning', data, model, top_k=5, threshold=0.3)

print(results)


import gradio as gr

#here we  Defineing  the search function for Gradio
def search_function(query):
  results = search_courses(query, data, model, top_k=5, threshold=0.3)
  return results.to_dict('records')
#Now here i am creating a Gradio interface

interface = gr.Interface(
fn=search_function,
inputs=gr.Textbox(label="Search for a course"),
outputs=gr.JSON(label="Search Results")
)
interface.launch()  #lanunching the interface on server side





